[{"body":"To troubleshoot issues with the csi driver and the provider, you can look at logs from the secrets-store container of the csi driver pod running on the same node as your application pod:\nkubectl get pod -o wide # find the secrets store csi driver pod running on the same node as your application pod kubectl logs csi-secrets-store-secrets-store-csi-driver-7x44t secrets-store ","excerpt":"To troubleshoot issues with the csi driver and the provider, you can …","ref":"/secrets-store-csi-driver-provider-azure/troubleshooting/less-than-version-0.0.9/","title":"For Azure Key Vault Provider version \u003c 0.0.9"},{"body":"Install the Secrets Store CSI Driver and the Azure Keyvault Provider Prerequisites\nRecommended Kubernetes version:\n For Linux - v1.16.0+ For Windows - v1.18.0+   For Kubernetes version 1.15 and below, please use Azure Keyvault Flexvolume\n Deployment using Helm\nFollow this guide to install the Secrets Store CSI driver and the Azure Key Vault provider using Helm.\nAlternatively, follow this guide to install using deployment yamls.\nIn addition, if you are using Secrets Store CSI Driver and the Azure Keyvault Provider in a cluster with pod security policy enabled, review and create the following policy that enables the spec required for Secrets Store CSI Driver and the Azure Keyvault Provider to work:\nkubectl apply -f https://raw.githubusercontent.com/Azure/secrets-store-csi-driver-provider-azure/master/deployment/pod-security-policy.yaml Using the Azure Key Vault Provider Create a new Azure Key Vault resource or use an existing one In addition to a Kubernetes cluster, you will need an Azure Key Vault resource with secret content to access. Follow this quickstart tutorial to deploy an Azure Key Vault and add an example secret to it.\nReview the settings you desire for your Key Vault, such as what resources (Azure VMs, Azure Resource Manager, etc.) and what kind of network endpoints can access secrets in it.\nTake note of the following properties for use in the next section:\n Name of secret object in Key Vault Secret content type (secret, key, cert) Name of Key Vault resource Resource group the Key Vault resides within Azure Subscription ID the Key Vault was provisioned with Azure Tenant ID the Subscription ID belongs to  Create your own SecretProviderClass Object Create a SecretProviderClass custom resource to provide provider-specific parameters for the Secrets Store CSI driver. In this example, use an existing Azure Key Vault or the Azure Key Vault resource created previously.\n NOTE: The SecretProviderClass has to be in the same namespace as the pod referencing it.\n Update this sample deployment to create a SecretProviderClass resource to provide Azure-specific parameters for the Secrets Store CSI driver.\nTo provide identity to access key vault, refer to the following section.\napiVersion:secrets-store.csi.x-k8s.io/v1alpha1kind:SecretProviderClassmetadata:name:azure-kvnamespec:provider:azure parameters:usePodIdentity:\"false\"# [OPTIONAL for Azure] if not provided, will default to \"false\"useVMManagedIdentity:\"false\"# [OPTIONAL available for version \u003e 0.0.4] if not provided, will default to \"false\"userAssignedIdentityID:\"client_id\"# [OPTIONAL available for version \u003e 0.0.4] use the client id to specify which user assigned managed identity to use. If using a user assigned identity as the VM's managed identity, then specify the identity's client id. If empty, then defaults to use the system assigned identity on the VMkeyvaultName:\"kvname\"# the name of the KeyVaultcloudName:\"\"# [OPTIONAL available for version \u003e 0.0.4] if not provided, azure environment will default to AzurePublicCloudcloudEnvFileName:\"\"# [OPTIONAL available for version \u003e 0.0.7] use to define path to file for populating azure environmentobjects:| array: - | objectName: secret1 objectAlias: SECRET_1 # [OPTIONAL available for version \u003e 0.0.4] object alias objectType: secret # object types: secret, key or cert. For Key Vault certificates, refer to https://github.com/Azure/secrets-store-csi-driver-provider-azure/blob/master/docs/getting-certs-and-keys.md for the object type to use objectVersion: \"\" # [OPTIONAL] object versions, default to latest if empty - | objectName: key1 objectAlias: \"\" # If provided then it has to be referenced in [secretObjects].[objectName] to sync with Kubernetes secrets objectType: key objectVersion: \"\" resourceGroup: \"rg1\" # [REQUIRED for version \u003c 0.0.4] the resource group of the KeyVault subscriptionId: \"subid\" # [REQUIRED for version \u003c 0.0.4] the subscription ID of the KeyVault tenantId: \"tid\" # the tenant ID of the KeyVault    Name Required Description Default Value     provider yes specify name of the provider \"\"   usePodIdentity no specify access mode: service principal or pod identity “false”   useVMManagedIdentity no [available for version \u003e 0.0.4] specify access mode to enable use of VM’s managed identity “false”   userAssignedIdentityID no [available for version \u003e 0.0.4] the user assigned identity ID is required for VMSS User Assigned Managed Identity mode \"\"   keyvaultName yes name of a Key Vault instance \"\"   cloudName no [available for version \u003e 0.0.4] name of the azure cloud based on azure go sdk (AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud, AzureGermanCloud, AzureStackCloud) \"\"   cloudEnvFileName no [available for version \u003e 0.0.7] path to the file to be used while populating the Azure Environment (required if target cloud is AzureStackCloud). More details here. \"\"   objects yes a string of arrays of strings \"\"   objectName yes name of a Key Vault object \"\"   objectAlias no [available for version \u003e 0.0.4] specify the filename of the object when written to disk - defaults to objectName if not provided \"\"   objectType yes type of a Key Vault object: secret, key or cert.\nFor Key Vault certificates, refer to doc for the object type to use. \"\"   objectVersion no version of a Key Vault object, if not provided, will use latest \"\"   objectFormat no [available for version \u003e 0.0.7] the format of the Azure Key Vault object, supported types are pem and pfx. objectFormat: pfx is only supported with objectType: secret and PKCS12 or ECC certificates “pem”   objectEncoding no [available for version \u003e 0.0.8] the encoding of the Azure Key Vault secret object, supported types are utf-8, hex and base64. This option is supported only with objectType: secret “utf-8”   resourceGroup no [required for version \u003c 0.0.4] name of resource group containing key vault instance \"\"   subscriptionId no [required for version \u003c 0.0.4] subscription ID containing key vault instance \"\"   tenantId yes tenant ID containing key vault instance \"\"    Provide Identity to Access Key Vault The Azure Key Vault Provider offers four modes for accessing a Key Vault instance:\n Service Principal Pod Identity VMSS User Assigned Managed Identity VMSS System Assigned Managed Identity  Update your Deployment Yaml To ensure your application is using the Secrets Store CSI driver, update your deployment yaml to use the secrets-store.csi.k8s.io driver and reference the SecretProviderClass resource created in the previous step.\nUpdate your linux deployment yaml or windows deployment yaml to use the Secrets Store CSI driver and reference the SecretProviderClass resource created in the previous step.\nvolumes:- name:secrets-store-inlinecsi:driver:secrets-store.csi.k8s.ioreadOnly:truevolumeAttributes:secretProviderClass:\"azure-kvname\"Deploy your Kubernetes Resources   Deploy the SecretProviderClass yaml created previously. For example:\nkubectl apply -f ./examples/v1alpha1_secretproviderclass.yaml\n  Deploy the application yaml created previously. For example:\nkubectl apply -f ./examples/nginx-pod-inline-volume-service-principal.yaml\n  Validate the secret To validate, once the pod is started, you should see the new mounted content at the volume path specified in your deployment yaml.\n## show secrets held in secrets-store kubectl exec -it nginx-secrets-store-inline ls /mnt/secrets-store/ ## print a test secret held in secrets-store kubectl exec -it nginx-secrets-store-inline cat /mnt/secrets-store/secret1 ","excerpt":"Install the Secrets Store CSI Driver and the Azure Keyvault Provider …","ref":"/secrets-store-csi-driver-provider-azure/getting-started/","title":"Getting Started"},{"body":"   ","excerpt":"   ","ref":"/secrets-store-csi-driver-provider-azure/demos-and-tutorials/community-demos-and-presentations/houssem-dellai/","title":"Houssem Dellai - Retrieving database login info from Azure KeyVault"},{"body":"","excerpt":"","ref":"/secrets-store-csi-driver-provider-azure/configurations/identity-access-modes/","title":"Identity Access Modes"},{"body":"These secrets are synced with Kubernetes Secret object and then injected into deployment as ENV variables.\n  ","excerpt":"These secrets are synced with Kubernetes Secret object and then …","ref":"/secrets-store-csi-driver-provider-azure/demos-and-tutorials/community-demos-and-presentations/nilesh-gule/","title":"Nilesh Gule - Retrieving RabbitMQ related secret from Azure KeyVault"},{"body":" Supported with Linux and Windows\n   Add your service principal credentials as a Kubernetes secrets accessible by the Secrets Store CSI driver. If using AKS you can learn about service principals in AKS here.\nA properly configured service principal will need to be passed in with the SP’s App ID and Password. Ensure this service principal has all the required permissions to access content in your Azure Key Vault instance.\n# Client ID (AZURE_CLIENT_ID) will be the App ID of your service principal # Client Secret (AZURE_CLIENT_SECRET) will be the Password of your service principal kubectl create secret generic secrets-store-creds --from-literal clientid=\u003cAZURE_CLIENT_ID\u003e --from-literal clientsecret=\u003cAZURE_CLIENT_SECRET\u003e If you do not have a service principal, run the following Azure CLI command to create a new service principal.\n# OPTIONAL: Create a new service principal, be sure to notate the SP secret returned on creation. az ad sp create-for-rbac --skip-assignment --name $SPNAME # If you lose your AZURE_CLIENT_SECRET (SP Secret), you can reset and receive it with this command: # az ad sp credential reset --name $SPNAME --credential-description \"APClientSecret\" --query password -o tsv With an existing service principal, assign the following permissions.\n# Set environment variables SPNAME=\u003cservicePrincipalName\u003e AZURE_CLIENT_ID=$(az ad sp show --id http://${SPNAME} --query appId -o tsv) KEYVAULT_NAME=\u003ckey-vault-name\u003e KEYVAULT_RESOURCE_GROUP=\u003cresource-group-name-for-KV\u003e SUBID=\u003csubscription-id\u003e # Assign Reader Role to the service principal for your keyvault az role assignment create --role Reader --assignee $AZURE_CLIENT_ID --scope /subscriptions/$SUBID/resourcegroups/$KEYVAULT_RESOURCE_GROUP/providers/Microsoft.KeyVault/vaults/$KEYVAULT_NAME az keyvault set-policy -n $KEYVAULT_NAME --key-permissions get --spn $AZURE_CLIENT_ID az keyvault set-policy -n $KEYVAULT_NAME --secret-permissions get --spn $AZURE_CLIENT_ID az keyvault set-policy -n $KEYVAULT_NAME --certificate-permissions get --spn $AZURE_CLIENT_ID   Update your linux deployment yaml or windows deployment yaml to reference the service principal kubernetes secret created in the previous step\nIf you did not change the name of the secret reference previously, no changes are needed.\nnodePublishSecretRef:name:secrets-store-creds  ","excerpt":" Supported with Linux and Windows\n   Add your service principal …","ref":"/secrets-store-csi-driver-provider-azure/configurations/identity-access-modes/service-principal-mode/","title":"Service Principal"},{"body":"The Azure Key Vault will be used to store your secrets. Run the following to create a Resource Group, and a uniquely named Azure Key Vault:\nKEYVAULT_RESOURCE_GROUP=\u003ckeyvault-resource-group\u003e KEYVAULT_LOCATION=\u003ckeyvault-location\u003e KEYVAULT_NAME=secret-store-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1) az group create -n $KEYVAULT_RESOURCE_GROUP --location $KEYVAULT_LOCATION az keyvault create -n $KEYVAULT_NAME -g $KEYVAULT_RESOURCE_GROUP --location $KEYVAULT_LOCATION If you were to check in your Azure Subscription, you will have a new Resource Group and Key Vault created. You can learn more here about Azure Key Vault naming, objects, types, and versioning.\nBelow are examples of how to quickly add a few objects to your Key Vault (make sure to add your own object name):\n💡 Please add 2 Objects (Keys and/or Secrets) and 2 Certificates (1 PEM, and 1 PKCS12) to your Key Vault.\naz keyvault secret set --vault-name $KEYVAULT_NAME --name \u003csecretNameHere\u003e --value $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 40 | head -n 1) az keyvault key create --vault-name $KEYVAULT_NAME --name \u003ckeyNameHere\u003e az keyvault certificate create --vault-name $KEYVAULT_NAME --name \u003ccertNameHere\u003e -p \"$(az keyvault certificate get-default-policy)\" Please keep track of the Key Vault Objects' name, type, and version . You will be adding them to a secrets.env file for testing as described here\nYou can retrieve the value of a Key Vault secret with the following script:\n# to view a given secret's value az keyvault secret show --vault-name $KEYVAULT_NAME --name \u003csecretNameHere\u003e --query value -o tsv # to view a given key's value az keyvault key show --vault-name $KEYVAULT_NAME --name \u003cyourKeyNameHere\u003e --query \"key.n\" -o tsv # to view a given certificate's value az keyvault certificate show --vault-name $KEYVAULT_NAME --name \u003cyourCertificateNameHere\u003e --query cer -o tsv ","excerpt":"The Azure Key Vault will be used to store your secrets. Run the …","ref":"/secrets-store-csi-driver-provider-azure/demos-and-tutorials/tutorials/setup-keyvault/","title":"Set up an Azure KeyVault"},{"body":"In some cases, you may want to create a Kubernetes Secret to mirror the mounted content. Use the optional secretObjects field to define the desired state of the synced Kubernetes secret objects.\n NOTE: Make sure the objectName in secretObjects matches the name of the mounted content. This could be the object name or the object alias.\n A SecretProviderClass custom resource should have the following components:\napiVersion:secrets-store.csi.x-k8s.io/v1alpha1kind:SecretProviderClassmetadata:name:my-providerspec:provider:azure secretObjects:# [OPTIONAL] SecretObject defines the desired state of synced K8s secret objects- data:- key:username # data field to populateobjectName:foo1 # name of the mounted content to sync. this could be the object name or the object aliassecretName:foosecret # name of the Kubernetes Secret objecttype:Opaque # type of the Kubernetes Secret object e.g. Opaque, kubernetes.io/tls NOTE: Here is the list of supported Kubernetes Secret types: Opaque, kubernetes.io/basic-auth, bootstrap.kubernetes.io/token, kubernetes.io/dockerconfigjson, kubernetes.io/dockercfg, kubernetes.io/ssh-auth, kubernetes.io/service-account-token, kubernetes.io/tls.\n  Here is a sample SecretProviderClass custom resource that syncs a secret from Azure Key Vault to a Kubernetes secret. To view an example of type kubernetes.io/tls, refer to the ingress-controller-tls sample  ","excerpt":"In some cases, you may want to create a Kubernetes Secret to mirror …","ref":"/secrets-store-csi-driver-provider-azure/configurations/sync-with-k8-secretes/","title":"Syncronize Mounted Content with Kubernetes Secret"},{"body":"","excerpt":"","ref":"/secrets-store-csi-driver-provider-azure/demos-and-tutorials/","title":"Demos and Tutorials"},{"body":"You can setup the Secrets Store CSI Driver to periodically update the pod mount and Kubernetes Secret with the latest content from external secrets-store. Refer to doc for steps on enabling auto rotation.\nNOTE The CSI driver does not restart the application pods. It only handles updating the pod mount and Kubernetes secret similar to how Kubernetes handles updates to Kubernetes secret mounted as volumes.\n","excerpt":"You can setup the Secrets Store CSI Driver to periodically update the …","ref":"/secrets-store-csi-driver-provider-azure/configurations/enable-auto-rotation-secrets/","title":"Enable Auto Rotation of Secrets"},{"body":"For 0.0.9+ the provider logs are available in the provider pods. To troubleshoot issues with the provider, you can look at logs from the provider pod running on the same node as your application pod\nkubectl get pod -o wide # find the csi-secrets-store-provider-azure pod running on the same node as your application pod kubectl logs csi-csi-secrets-store-provider-azure-lmx6p ","excerpt":"For 0.0.9+ the provider logs are available in the provider pods. To …","ref":"/secrets-store-csi-driver-provider-azure/troubleshooting/equal-to-and-greater-than-version-0.0.9/","title":"For Azure Key Vault Provider version 0.0.9+"},{"body":" Supported only on Linux\n Prerequisites\n💡 Make sure you have installed pod identity to your Kubernetes cluster\nThis project makes use of the aad-pod-identity project located here to handle the identity management of the pods. Reference the aad-pod-identity README if you need further instructions on any of these steps.\nNot all steps need to be followed on the instructions for the aad-pod-identity project as we will also complete some of the steps on our installation here.\n  Install the aad-pod-identity components to your cluster\n  Install the RBAC enabled aad-pod-identiy infrastructure components:\nkubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml\r  💡 Follow the Role assignment documentation to setup all the required roles for aad-pod-identity components.\n    Create an Azure User Identity\nCreate an Azure User Identity with the following command. Get clientId and id from the output.\naz identity create -g \u003cresourcegroup\u003e -n \u003cidname\u003e\r  Assign permissions to new identity Ensure your Azure user identity has all the required permissions to read the keyvault instance and to access content within your key vault instance. If not, you can run the following using the Azure cli:\n# Assign Reader Role to new Identity for your keyvault az role assignment create --role Reader --assignee \u003cprincipalid\u003e --scope /subscriptions/\u003csubscriptionid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.KeyVault/vaults/\u003ckeyvaultname\u003e # set policy to access keys in your keyvault az keyvault set-policy -n $KEYVAULT_NAME --key-permissions get --spn \u003cYOUR AZURE USER IDENTITY CLIENT ID\u003e # set policy to access secrets in your keyvault az keyvault set-policy -n $KEYVAULT_NAME --secret-permissions get --spn \u003cYOUR AZURE USER IDENTITY CLIENT ID\u003e # set policy to access certs in your keyvault az keyvault set-policy -n $KEYVAULT_NAME --certificate-permissions get --spn \u003cYOUR AZURE USER IDENTITY CLIENT ID\u003e   Add a new AzureIdentity for the new identity to your cluster\nEdit and save this as aadpodidentity.yaml\nSet type: 0 for Managed Service Identity; type: 1 for Service Principal In this case, we are using managed service identity, type: 0. Create a new name for the AzureIdentity. Set resourceID to id of the Azure User Identity created from the previous step.\napiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentitymetadata:name:\u003cany-name\u003espec:type:0resourceID:/subscriptions/\u003csubid\u003e/resourcegroups/\u003cresourcegroup\u003e/providers/Microsoft.ManagedIdentity/userAssignedIdentities/\u003cidname\u003eclientID:\u003cclientid\u003ekubectl create -f aadpodidentity.yaml   Add a new AzureIdentityBinding for the new Azure identity to your cluster\nEdit and save this as aadpodidentitybinding.yaml\napiVersion:\"aadpodidentity.k8s.io/v1\"kind:AzureIdentityBindingmetadata:name:\u003cany-name\u003espec:azureIdentity:\u003cname of AzureIdentity created from previous step\u003eselector:\u003clabel value to match in your app\u003ekubectl create -f aadpodidentitybinding.yaml\r  Add the following to this deployment yaml:\nInclude the aadpodidbinding label matching the selector value set in the previous step so that this pod will be assigned an identity\nmetadata:labels:aadpodidbinding:\u003cAzureIdentityBinding Selector created from previous step\u003e  Update this sample deployment to create a SecretProviderClass resource with usePodIdentity: \"true\" to provide Azure-specific parameters for the Secrets Store CSI driver.\nMake sure to update usepodidentity to true\nusepodidentity:\"true\"  Deploy your app\nkubectl apply -f ../examples/nginx-pod-secrets-store-inline-volume-secretproviderclass-podid.yaml   NOTE When using the Pod Identity option mode, there can be some amount of delay in obtaining the objects from keyvault. During the pod creation time, in this particular mode aad-pod-identity will need to create the AzureAssignedIdentity for the pod based on the AzureIdentity and AzureIdentityBinding, retrieve token for keyvault. This process can take time to complete and it’s possible for the pod volume mount to fail during this time. When the volume mount fails, kubelet will keep retrying until it succeeds. So the volume mount will eventually succeed after the whole process for retrieving the token is complete.\n","excerpt":" Supported only on Linux\n Prerequisites\n💡 Make sure you have installed …","ref":"/secrets-store-csi-driver-provider-azure/configurations/identity-access-modes/pod-identity-mode/","title":"Pod Identity"},{"body":"Once the secret is created, you may wish to set an ENV VAR in your deployment to reference the new Kubernetes secret.\nspec:containers:- image:nginxname:nginxenv:- name:SECRET_USERNAMEvalueFrom:secretKeyRef:name:foosecretkey:usernameHere is a sample deployment yaml that creates an ENV VAR from the synced Kubernetes secret.\n","excerpt":"Once the secret is created, you may wish to set an ENV VAR in your …","ref":"/secrets-store-csi-driver-provider-azure/configurations/set-env-var/","title":"Set your Environment Variable to Reference a Kubernetes Secret"},{"body":"","excerpt":"","ref":"/secrets-store-csi-driver-provider-azure/demos-and-tutorials/tutorials/","title":"Tutorials"},{"body":"","excerpt":"","ref":"/secrets-store-csi-driver-provider-azure/demos-and-tutorials/community-demos-and-presentations/","title":"Community Demos and Presentations"},{"body":" Supported with Linux and Windows\n This option allows azure KeyVault to use the user assigned managed identity on the k8s cluster VMSS directly.\nIn AKS you can use the user assigned Kubelet managed identity (doesn’t support BYO today) or create your own user assigned managed identity as described below.\n You can create AKS with managed identities now and then you can skip steps 1 and 2. To be able to get the CLIENT ID, the user can run the following command\naz aks show -g \u003cresource group\u003e -n \u003caks cluster name\u003e --query identityProfile.kubeletidentity.clientId -o tsv   Create Azure Managed Identity  az identity create -g \u003cRESOURCE GROUP\u003e -n \u003cIDENTITY NAME\u003e Assign Azure Managed Identity to VMSS  az vmss identity assign -g \u003cRESOURCE GROUP\u003e -n \u003cK8S-AGENT-POOL-VMSS\u003e --identities \u003cUSER ASSIGNED IDENTITY RESOURCE ID\u003e  Grant Azure Managed Identity KeyVault permissions\nEnsure that your Azure Identity has the role assignments required to see your Key Vault instance and to access its content. Run the following Azure CLI commands to assign these roles if needed:\n# set policy to access keys in your Key Vault az keyvault set-policy -n $KEYVAULT_NAME --key-permissions get --spn \u003cYOUR AZURE MANAGED IDENTITY CLIENT ID\u003e # set policy to access secrets in your Key Vault az keyvault set-policy -n $KEYVAULT_NAME --secret-permissions get --spn \u003cYOUR AZURE MANAGED IDENTITY CLIENT ID\u003e # set policy to access certs in your Key Vault az keyvault set-policy -n $KEYVAULT_NAME --certificate-permissions get --spn \u003cYOUR AZURE MANAGED IDENTITY CLIENT ID\u003e   Deploy your application. Specify useVMManagedIdentity to true and provide userAssignedIdentityID.\n  useVMManagedIdentity:\"true\"# [OPTIONAL available for version \u003e 0.0.4] if not provided, will default to \"false\"userAssignedIdentityID:\"clientid\"# [OPTIONAL available for version \u003e 0.0.4] use the client id to specify which user assigned managed identity to use. If using a user assigned identity as the VM's managed identity, then specify the identity's client id. If empty, then defaults to use the system assigned identity on the VM","excerpt":" Supported with Linux and Windows\n This option allows azure KeyVault …","ref":"/secrets-store-csi-driver-provider-azure/configurations/identity-access-modes/user-assigned-msi-mode/","title":"VMSS User Assigned Managed Identity"},{"body":"","excerpt":"","ref":"/secrets-store-csi-driver-provider-azure/configurations/","title":"Configurations"},{"body":"","excerpt":"","ref":"/secrets-store-csi-driver-provider-azure/troubleshooting/","title":"Troubleshooting"},{"body":"Upgrading to Key Vault provider 0.0.9+ Warning tl;dr - 0.0.9+ release of the Azure Key Vault provider is incompatible with the Secrets Store CSI Driver versions \u003c v0.0.14.  Prior to v0.0.14 release of the Secrets Store CSI Driver, the driver communicated with the provider by invoking the provider binary installed on the host. However with v0.0.14 the driver now introduces a new option to communicate with the provider using gRPC. This feature is enabled by a feature flag in the driver --grpc-supported-providers=azure. The 0.0.9 release of the Azure Key Vault provider implements the gRPC server changes and is no longer backward compatible with the Secrets Store CSI Driver versions \u003c v0.0.14.\nPlease carefully read this doc as you upgrade to the latest release of the Azure Key Vault Provider\nIf the Secrets Store CSI Driver and Azure Key Vault Provider were installed using helm charts from this repo helm upgrade to the latest chart release in the repo will update the Azure Key Vault Provider and Secrets Store CSI Driver to the compatible versions\n This updates the driver version to v0.0.14+ This updates the provider version to 0.0.9+ This updates the driver manifest to include the flag --grpc-supported-providers=azure to enable communication between driver and provider using gRPC  Run the following commands to confirm the images have been updated -\n secrets-store container in secrets-store-csi-driver pod is running v0.0.14+  ➜ kubectl get ds -l app=secrets-store-csi-driver -o jsonpath='{range .items[*]}{.spec.template.spec.containers[1].image}{\"\\n\"}' mcr.microsoft.com/k8s/csi/secrets-store/driver:v0.0.14 secrets-store container in the secrets-store-csi-driver pod contains the arg --grpc-supported-providers=azure  ➜ kubectl get ds -l app=secrets-store-csi-driver -o jsonpath='{range .items[*]}{.spec.template.spec.containers[1].args}{\"\\n\"}' [\"--debug=true\",\"--endpoint=$(CSI_ENDPOINT)\",\"--nodeid=$(KUBE_NODE_NAME)\",\"--provider-volume=/etc/kubernetes/secrets-store-csi-providers\",\"--grpc-supported-providers=azure\",\"--metrics-addr=:8080\"] csi-secrets-store-provider-azure pod is running 0.0.9+  ➜ kubectl get ds -l app=csi-secrets-store-provider-azure -o jsonpath='{range .items[*]}{.spec.template.spec.containers[0].image}{\"\\n\"}' mcr.microsoft.com/oss/azure/secrets-store/provider-azure:0.0.9 If the Secrets Store CSI Driver and Azure Key Vault Provider were installed using deployment yamls The driver and provider need to be updated one after the other to ensure compatible versions are being run.\n Update the driver by installing the yamls from Install the Secrets Store CSI Driver  ACTION REQUIRED If using the yamls from the Secrets Store CSI Driver, add the following flag --grpc-supported-providers=azure to the Linux and Windows daemonset manifests.  The flag needs to be added to the secrets-store container args   ACTION REQUIRED If using the helm charts from secrets-store-csi-driver, then run helm upgrade with --set grpcSupportedProviders=azure   After the driver is upgraded to the latest version install the latest Azure Key Vault provider by following the doc  ","excerpt":"Upgrading to Key Vault provider 0.0.9+ Warning tl;dr - 0.0.9+ release …","ref":"/secrets-store-csi-driver-provider-azure/upgrading/","title":"Upgrading"},{"body":" Supported with Linux and Windows\n This option allows azure KeyVault to use the system assigned managed identity on the k8s cluster VMSS directly.\nAKS uses system-assigned managed identity as cluster managed identity. This managed identity shouldn’t be used to authenticate with KeyVault. You should consider using a user-assigned managed identity instead.\nBefore this step, you need to turn on system assigned managed identity on your VMSS clsuter configuration.\n Verify that the nodes have its own system assigned managed identity  az vmss identity show -g \u003cresource group\u003e -n \u003cvmss scalset name\u003e -o yaml The output should contain type: SystemAssigned and note principalId.\n Grant Azure Managed Identity KeyVault permissions\nEnsure that your Azure Identity has the role assignments required to see your Key Vault instance and to access its content. Run the following Azure CLI commands to assign these roles if needed:\n# set policy to access keys in your Key Vault az keyvault set-policy -n $KEYVAULT_NAME --key-permissions get --object-id \u003cYOUR AZURE VMSS PRINCIPALID\u003e # set policy to access secrets in your Key Vault az keyvault set-policy -n $KEYVAULT_NAME --secret-permissions get --object-id \u003cYOUR AZURE VMSS PRINCIPALID\u003e # set policy to access certs in your Key Vault az keyvault set-policy -n $KEYVAULT_NAME --certificate-permissions get --object-id \u003cYOUR AZURE VMSS PRINCIPALID\u003e   Deploy your application. Specify useVMManagedIdentity to true.\n  useVMManagedIdentity:\"true\"# [OPTIONAL available for version \u003e 0.0.4] if not provided, will default to \"false\"","excerpt":" Supported with Linux and Windows\n This option allows azure KeyVault …","ref":"/secrets-store-csi-driver-provider-azure/configurations/identity-access-modes/system-assigned-msi-mode/","title":"VMSS System Assigned Managed Identity"},{"body":"In order to pull secret content from Key Vault instances hosted on air-gapped and/or on-prem Azure clouds, your SecretProviderClass resource must include the following:\nparameters:cloudName:\"AzureStackCloud\"cloudEnvFileName:\"/path/to/custom/environment.jsonParameter cloudEnvFileName should be the path to a JSON file that contains the custom cloud environment details that azure-sdk-for-go needs to interact with the target Key Vault instance.\nTypically, the custom cloud environment file is stored in the file system of the Kubernetes node and accessible to the secrets-store-csi-driver pods through a mounted volume.\nEven if the target cloud is not an Azure Stack Hub cloud, cloud name must be set to \"AzureStackCloud\" to signal azure-sdk-for-go to load the custom cloud environment details from cloudEnvFileName.\nEnvironment files The custom cloud environment sample below shows the minimum set of properties required by secrets-store-csi-driver-provider-azure.\n{ \"name\": \"AzureStackCloud\", \"activeDirectoryEndpoint\": \"https://login.microsoftonline.com/\", \"keyVaultEndpoint\": \"https://vault.azure.net/\", \"keyVaultDNSSuffix\": \"vault.azure.net\" } ","excerpt":"In order to pull secret content from Key Vault instances hosted on …","ref":"/secrets-store-csi-driver-provider-azure/configurations/custom-environments/","title":"Custom Azure Environments"},{"body":"Azure Key Vault Provider for Secrets Store CSI Driver is an open source project that is not covered by the Microsoft Azure support policy. Please search open issues here, and if your issue isn’t already represented please open a new one. The project maintainers will respond to the best of their abilities.\n","excerpt":"Azure Key Vault Provider for Secrets Store CSI Driver is an open …","ref":"/secrets-store-csi-driver-provider-azure/support/","title":"Support"},{"body":"Local End-To-End Testing for the Azure Key Vault Provider This section will show you how to locally test the Azure Key Vault Provider end-to-end (e2e). The e2e tests utilize Bats for testing the scripts. Take a look inside the test/bats folder to see the tests and the deployments needed for creating the e2e tests.\nE2E Prerequisites  Helm 3.x Kubectl Azure Service Principal Azure Key Vault with objects stored inside Kind Docker Bats  As as prerequisite, you will need to have an Azure Key Vault with objects stored and an Azure Service Principal. You can follow the next few steps to set up both.\nSet up an Azure Key Vault For assistance on setting up an Azure Key Vault specific to testing this project, please refer to this guide\nAssign a Service Principal to Your Azure Key Vault For assistance on assigning an existing or new Service Principal to your Key Vault, please follow this guide.\nPreparing your secrets This step will make sure that you have all the necessary environment variables prepared to test this project. Now, add your environment variables to a secrets.env file at the application root directory.\n Add all secrets related to the Azure Key Vault, Service Principal, and your Azure Subscription.   By this point you should have 4 Objects in your Key Vault. 2 Certs, and 2 Objects(Secrets and/or Keys).\n # secrets.env OBJECT1_NAME=\u003cyourKeyVaultSecretName\u003e OBJECT1_TYPE=secret OBJECT1_ALIAS=\"\" OBJECT1_VERSION=\"\" OBJECT2_NAME=\u003cyourKeyVaultKeyName\u003e OBJECT2_VALUE=\u003cyourKeyVaultKeyValue\u003e OBJECT2_TYPE=key OBJECT2_ALIAS=\u003cYOUR_KEY_VAULT_KEY_ALIAS\u003e OBJECT2_VERSION=\"\" CERT1_NAME=\u003cyourKeyVaultCertName\u003e CERT1_VALUE=\u003cyourKeyVaultCertValue\u003e CERT1_VERSION=\"\" CERT2_NAME=\u003cyourKeyVaultCertName\u003e CERT2_VALUE=\u003cyourKeyVaultCertValue\u003e CERT2_VERSION=\"\" KEYVAULT_NAME=\u003cyourAzureKeyVaultName\u003e AZURE_CLIENT_ID=\u003cyourAzureServicePrincipalId\u003e AZURE_CLIENT_SECRET=\u003cyourAzureServicePrincipalSecret\u003e TENANT_ID=\u003cyourAzureTenantId\u003e We’ll add the necssary environment variables needed inside the Makefile and azure.bats.  # secrets.env # ... # the name you want to give for the docker image DOCKER_IMAGE=e2e/secrets-store-csi-driver-provider-azure # the tag you'd like to give your docker image IMAGE_TAG=\u003cimage_tag\u003e # assign an image version to know which changes you are testing. IMAGE_VERSION=\u003cimage_version\u003e # name of docker image provided for the azure.bats tests. SHOULD be the same as DOCKER_IMAGE PROVIDER_TEST_IMAGE=e2e/secrets-store-csi-driver-provider-azure # local path to folder container cloned Secrets Store CSI Driver SECRETS_STORE_CSI_DRIVER_PATH=\u003cyour_local_path_to_the_secrets_store_csi_driver\u003e # will disable tests not related to the Kind Cluster CI_KIND_CLUSTER=true \rThe finished 'secrets.env' should look like this:\r\rOBJECT1_NAME=\u003cyourKeyVaultSecretName\u003e\rOBJECT1_TYPE=secret\rOBJECT1_ALIAS=\"\"\rOBJECT1_VERSION=\"\"\rOBJECT2_NAME=\u003cyourKeyVaultKeyName\u003e\rOBJECT2_VALUE=\u003cyourKeyVaultKeyValue\u003e\rOBJECT2_TYPE=key\rOBJECT2_ALIAS=\u003cYOUR_KEY_VAULT_KEY_ALIAS\u003e\rOBJECT2_VERSION=\"\"\rCERT1_NAME=\u003cyourKeyVaultCertName\u003e\rCERT1_VALUE=\u003cyourKeyVaultCertValue\u003e\rCERT1_VERSION=\"\"\rCERT2_NAME=\u003cyourKeyVaultCertName\u003e\rCERT2_VALUE=\u003cyourKeyVaultCertValue\u003e\rCERT2_VERSION=\"\"\rKEYVAULT_NAME=\u003cyourAzureKeyVaultName\u003e\rAZURE_CLIENT_ID=\u003cyourAzureServicePrincipalId\u003e\rAZURE_CLIENT_SECRET=\u003cyourAzureServicePrincipalSecret\u003e\rTENANT_ID=\u003cyourAzureTenantId\u003e\rDOCKER_IMAGE=e2e/secrets-store-csi-driver-provider-azure\rIMAGE_TAG=\u003cimage_tag\u003e\rIMAGE_VERSION=\u003cimage_version\u003e\rPROVIDER_TEST_IMAGE=e2e/secrets-store-csi-driver-provider-azure\rSECRETS_STORE_CSI_DRIVER_PATH=\u003cyour_local_path_to_the_secrets_store_csi_driver\u003e\rCI_KIND_CLUSTER=true\r \rTesting the Azure Key Vault Provider Here are the steps that you can follow to test the Azure Key Vault Azure Provider.\n Make sure you have covered all of the prerequisites listed. Now run the following make targets to test the Azure Provider e2e.  # create and configure kind cluster make e2e-local-bootstrap # set your cluster context to the kind cluster export KUBECONFIG=$(kind get kubeconfig-path) # add the dev namespace where the Secrets Store CSI Driver and the Azure Provider will be deployed kubectl create namespace dev # run the e2e-tests make e2e-test ","excerpt":"Local End-To-End Testing for the Azure Key Vault Provider This section …","ref":"/secrets-store-csi-driver-provider-azure/testing/","title":"Testing"},{"body":" Note: This behavior was introduced in 0.0.6 release of Azure Key Vault Provider for Secrets Store CSI Driver. This is backward incompatible with the prior releases.\n The Azure Key Vault Provider for Secrets Store CSI Driver has been designed to closely align with the current behavior of az keyvault certificate/secret/key download.\nAzure Key Vault design makes sharp distinctions between Keys, Secrets and Certificates. The KeyVault service’s Certificates features were designed making use of it’s Keys and Secrets capabilities.\n When a Key Vault certificate is created, an addressable key and secret are also created with the same name. The Key Vault key allows key operations and the Key Vault secret allows retrieval of the certificate value as a secret. A Key Vault certificate also contains public x509 certificate metadata.\n The KeyVault service stores both the public and the private parts of your certificate in a KeyVault secret, along with any other secret you might have created in that same KeyVault instance.\nHow to obtain the certificate Knowing that the certificate is stored in a Key Vault certificate, we can retrieve it by using object type cert.\n Note: For chain of certificates, using object type cert only returns the Server certificate and not the entire chain.\n array:- | objectName: certName objectType: cert objectVersion: \"\" The contents of the file will be the certificate in PEM format.\nHow to obtain the public key Knowing that the public key is stored in a Key Vault key, we can retrieve it by using object type key\narray:- | objectName: certName objectType: key objectVersion: \"\" The contents of the file will be the public key in PEM format.\nHow to obtain the private key and certificate Knowing that the private key is stored in a Key Vault secret with the public certificate included, we can retrieve it by using object type secret\narray:- | objectName: certName objectType: secret objectVersion: \"\" The contents of the file will be the private key and certificate in PEM format.\n Note: For chain of certificates, using object type secret returns entire certificate chain along with the private key.\n ","excerpt":" Note: This behavior was introduced in 0.0.6 release of Azure Key …","ref":"/secrets-store-csi-driver-provider-azure/configurations/getting-certs-and-keys/","title":"Getting Certificates and Keys using Azure Key Vault Provider"},{"body":"Contributing This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\nThis project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n","excerpt":"Contributing This project welcomes contributions and suggestions. Most …","ref":"/secrets-store-csi-driver-provider-azure/contribution-guidelines/","title":"Contribution Guidelines"},{"body":"Azure Key Vault provider for Secrets Store CSI driver allows you to get secret contents stored in an Azure Key Vault instance and use the Secrets Store CSI driver interface to mount them into Kubernetes pods.\nFeatures  Mounts secrets/keys/certs on pod start using a CSI volume Supports mounting multiple secrets store objects as a single volume Supports pod identity to restrict access with specific identities Supports pod portability with the SecretProviderClass CRD Supports windows containers (Kubernetes version v1.18+) Supports sync with Kubernetes Secrets (Secrets Store CSI Driver v0.0.10+) Supports multiple secrets stores providers in the same cluster.  Secret Content is Mounted on Pod Start On pod start and restart, the driver will call the Azure provider binary to retrieve the secret content from the Azure Key Vault instance you have specified in the SecretProviderClass custom resource. Then the content will be mounted to the container’s file system.\nTo validate, once the pod is started, you should see the new mounted content at the volume path specified in your deployment yaml.\nkubectl exec -it nginx-secrets-store-inline ls /mnt/secrets-store/ foo ","excerpt":"Azure Key Vault provider for Secrets Store CSI driver allows you to …","ref":"/secrets-store-csi-driver-provider-azure/","title":"Azure Key Vault Provider for Secrets Store CSI Driver"}]